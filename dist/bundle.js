!function(t){var e={};function i(r){if(e[r])return e[r].exports;var s=e[r]={i:r,l:!1,exports:{}};return t[r].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(r,s,function(e){return t[e]}.bind(null,s));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);class r{constructor(t,e){this.width=t,this.height=e,this.canvas=document.createElement("canvas"),this.canvas.setAttribute("width",t),this.canvas.setAttribute("height",e),this.context=this.canvas.getContext("2d"),this.gridOptions={color:"grey",gridSize:40,linesSize:0},this.occupied={},document.getElementsByTagName("body")[0].appendChild(this.canvas)}get(){return this.canvas}getRandomCol(){return Math.floor(Math.random()*(this.width/this.gridOptions.gridSize))}getColFromX(t){return Math.floor(t/this.gridOptions.gridSize)}getRowFromY(t){return Math.floor(t/this.gridOptions.gridSize)}getRandomRow(){return Math.floor(Math.random()*(this.height/this.gridOptions.gridSize))}getXFromCol(t){return t%Math.floor(this.width/this.gridOptions.gridSize)*this.gridOptions.gridSize}getYFromRow(t){return t%Math.floor(this.width/this.gridOptions.gridSize)*this.gridOptions.gridSize}drawGrid(){this.context.strokeStyle=this.gridOptions.color,this.context.lineWidth=parseInt(this.gridOptions.linesSize);let t=parseInt(this.gridOptions.gridSize);for(let e=0;e<this.height;e+=t)this.context.moveTo(0,e),this.context.lineTo(this.width,e),this.context.stroke();for(let e=0;e<this.width;e+=t)this.context.moveTo(e,0),this.context.lineTo(e,this.height),this.context.stroke()}drawPlayer(t,e){let i=document.createElement("img");i.setAttribute("src","img/person.png"),i.setAttribute("id","person"),i.onload=()=>{this.context.drawImage(i,this.getXFromCol(t),this.getYFromRow(e),this.gridOptions.gridSize,this.gridOptions.gridSize)},this.occupied[this.getKey(t,e)]="player"}drawPath(t){for(let e=0;e<t.length;e++){let i,r;[i,r]=t[e].split(","),this.context.beginPath(),this.context.arc(this.getXFromCol(i)+20,this.getYFromRow(r)+20,5,0,2*Math.PI),this.context.fillStyle="red",this.context.fill(),this.context.lineWidth=0,this.context.stroke()}}getKey(t,e){return`${t},${e}`}isOccupiedByTree(t,e){return void 0!==this.occupied[this.getKey(t,e)]&&"tree"===this.occupied[this.getKey(t,e)]}drawTrees(){for(let t=0;t<150;t++){let e=this.getRandomCol(),i=this.getRandomRow();if(void 0!==this.occupied[this.getKey(e,i)]){t-=1;continue}let r=document.createElement("img");r.setAttribute("src","img/tree.jpeg"),r.setAttribute("id","tree"),r.onload=()=>{this.context.drawImage(r,this.getXFromCol(e)+1,this.getYFromRow(i)+1,this.gridOptions.gridSize-1,this.gridOptions.gridSize-1)},this.occupied[this.getKey(e,i)]="tree"}}clearBlock(t,e){this.context.clearRect(this.getXFromCol(t)+1,this.getYFromRow(e)+1,this.gridOptions.gridSize-2,this.gridOptions.gridSize-2)}clearBlocks(t){for(let e=0;e<t.length;e++){let i=t[e].split(",");this.clearBlock(i[0],i[1])}}}class s{constructor(t){this.renderer=t}generatePath(t,e){let i={c:t.c,r:t.r},r=[i],s=!1,o=[],n={};for(n[`${i.c},${i.r}`]=!1;r.length>0;){i=r.shift();let t=[-1,1,0,0],h=[0,0,-1,1];if(e.c==i.c&&e.r==i.r){s=!0;break}for(let e=0;e<t.length;e++){let s=parseInt(i.r)+t[e],d=parseInt(i.c)+h[e];s<0||d<0||s>Math.floor(this.renderer.height/this.renderer.gridOptions.gridSize)-1||d>Math.floor(this.renderer.width/this.renderer.gridOptions.gridSize)-1||-1===o.indexOf(`${d},${s}`)&&(this.renderer.isOccupiedByTree(d,s)||(o.push(`${d},${s}`),r.push({c:d,r:s}),n[`${d},${s}`]=`${i.c},${i.r}`))}}if(s){let r=[`${e.c},${e.r}`];if(i=n[`${e.c},${e.r}`],!i)return!1;for(;i!==`${t.c},${t.r}`;)r.push(i),i=n[i];return r.reverse()}return!1}}class o{constructor(t,e){this.path=[],this.renderer=t,this.animationFrame=null,this.timerId=null,this.previous={},this.pathFinder=e,this.start={c:0,r:0}}addEvent(){this.renderer.get().addEventListener("click",t=>{this.animationFrame=null,clearInterval(this.timerId);let e={c:this.renderer.getColFromX(t.clientX),r:this.renderer.getRowFromY(t.clientY)};if(this.renderer.clearBlocks(this.path),this.path=this.pathFinder.generatePath(this.start,e),!this.path)return;this.renderer.drawPath(this.path),this.previous={c:this.start.c,r:this.start.r};let i=()=>{let t=this.path.shift();if(!t)return void window.cancelAnimationFrame(this.animationFrame);this.renderer.context.clearRect(this.renderer.getXFromCol(this.previous.c)+1,this.renderer.getYFromRow(this.previous.r)+1,38,38);let e=t.split(",");this.start=this.previous={c:e[0],r:e[1]},this.renderer.clearBlock(this.previous.c,this.previous.r),this.renderer.drawPlayer(e[0],e[1]),this.path.length>0&&(this.timerId=setTimeout(()=>{window.requestAnimationFrame(i)},200))};this.animationFrame=window.requestAnimationFrame(i)})}}document.addEventListener("DOMContentLoaded",()=>{let t=new r(1401,641);t.drawGrid(),t.drawPlayer(0,0),t.drawTrees(),new o(t,new s(t)).addEvent()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlbmRlcmVyLmpzIiwid2VicGFjazovLy8uL3NyYy9wYXRoZmluZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9hbmltYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIlJlbmRlcmVyIiwid2lkdGgiLCJoZWlnaHQiLCJ0aGlzIiwiY2FudmFzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiY29udGV4dCIsImdldENvbnRleHQiLCJncmlkT3B0aW9ucyIsImNvbG9yIiwiZ3JpZFNpemUiLCJsaW5lc1NpemUiLCJvY2N1cGllZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYXBwZW5kQ2hpbGQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJ4IiwieSIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwicGFyc2VJbnQiLCJtb3ZlVG8iLCJsaW5lVG8iLCJzdHJva2UiLCJpbWFnZSIsIm9ubG9hZCIsImRyYXdJbWFnZSIsImdldFhGcm9tQ29sIiwiZ2V0WUZyb21Sb3ciLCJnZXRLZXkiLCJwYXRoIiwibGVuZ3RoIiwic3BsaXQiLCJiZWdpblBhdGgiLCJhcmMiLCJQSSIsImZpbGxTdHlsZSIsImZpbGwiLCJ1bmRlZmluZWQiLCJnZXRSYW5kb21Db2wiLCJnZXRSYW5kb21Sb3ciLCJjbGVhclJlY3QiLCJyZXMiLCJjbGVhckJsb2NrIiwiUGF0aEZpbmRlciIsInJlbmRlcmVyIiwic291cmNlIiwidGFyZ2V0IiwicSIsImZvdW5kIiwidmlzaXRlZCIsInBhdGhzIiwic2hpZnQiLCJkciIsImRjIiwiY3IiLCJjYyIsImluZGV4T2YiLCJpc09jY3VwaWVkQnlUcmVlIiwicHVzaCIsInJpZ2h0UGF0aCIsInJldmVyc2UiLCJBbmltYXRpb24iLCJwYXRoRmluZGVyIiwiYW5pbWF0aW9uRnJhbWUiLCJ0aW1lcklkIiwicHJldmlvdXMiLCJzdGFydCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwiY2xlYXJJbnRlcnZhbCIsImdldENvbEZyb21YIiwiY2xpZW50WCIsImdldFJvd0Zyb21ZIiwiY2xpZW50WSIsImNsZWFyQmxvY2tzIiwiZ2VuZXJhdGVQYXRoIiwiZHJhd1BhdGgiLCJhbmltYXRpb25DYWxsYmFjayIsImN1cnIiLCJ3aW5kb3ciLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImRyYXdQbGF5ZXIiLCJzZXRUaW1lb3V0IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZHJhd0dyaWQiLCJkcmF3VHJlZXMiLCJhZGRFdmVudCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hC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REFDLE9BQU9DLHFCQUFxQmxGLEtBQUtpRSxnQkFJbENqRSxLQUFLOEMsU0FBU3pDLFFBQVFxQyxVQUFVMUMsS0FBSzhDLFNBQVNsQixZQUFZNUIsS0FBS21FLFNBQVNqRyxHQUFLLEVBQUc4QixLQUFLOEMsU0FBU2pCLFlBQVk3QixLQUFLbUUsU0FBU3hGLEdBQUssRUFBRyxHQUFJLElBQ3BJLElBQUlnRSxFQUFNcUMsRUFBSy9DLE1BQU0sS0FDckJqQyxLQUFLb0UsTUFBUXBFLEtBQUttRSxTQUFXLENBQzVCakcsRUFBR3lFLEVBQUksR0FDUGhFLEVBQUdnRSxFQUFJLElBRVIzQyxLQUFLOEMsU0FBU0YsV0FBVzVDLEtBQUttRSxTQUFTakcsRUFBRzhCLEtBQUttRSxTQUFTeEYsR0FDeERxQixLQUFLOEMsU0FBU3FDLFdBQVd4QyxFQUFJLEdBQUlBLEVBQUksSUFFakMzQyxLQUFLK0IsS0FBS0MsT0FBUyxJQUN0QmhDLEtBQUtrRSxRQUFVa0IsV0FBVyxLQUN6QkgsT0FBT0ksc0JBQXNCTixJQUMzQixPQUlML0UsS0FBS2lFLGVBQWlCZ0IsT0FBT0ksc0JBQXNCTixNQzNEdEQ3RSxTQUFTbUUsaUJBQWlCLG1CQUFvQixLQUM3QyxJQUFJdkIsRUFBVyxJQUFJakQsRUFBUyxLQUFNLEtBRWxDaUQsRUFBU3dDLFdBQ1R4QyxFQUFTcUMsV0FBVyxFQUFHLEdBQ3ZCckMsRUFBU3lDLFlBRU8sSUFBSXhCLEVBQVVqQixFQUFVLElBQUlELEVBQVdDLElBQzdDMEMiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiY2xhc3MgUmVuZGVyZXIge1xuXG5cdGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQpIHtcblx0XHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdFx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0dGhpcy5jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcblx0XHR0aGlzLmNhbnZhcy5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgd2lkdGgpO1xuXHRcdHRoaXMuY2FudmFzLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgaGVpZ2h0KTtcblx0XHR0aGlzLmNvbnRleHQgPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG5cdFx0dGhpcy5ncmlkT3B0aW9ucyA9IHtcblx0XHRcdGNvbG9yOiAgICAgJ2dyZXknLFxuXHRcdFx0Z3JpZFNpemU6ICA0MCxcblx0XHRcdGxpbmVzU2l6ZTogMFxuXHRcdH07XG5cdFx0dGhpcy5vY2N1cGllZCA9IHt9O1xuXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXS5hcHBlbmRDaGlsZCh0aGlzLmNhbnZhcyk7XG5cdH1cblxuXHRnZXQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuY2FudmFzO1xuXHR9XG5cblx0Z2V0UmFuZG9tQ29sKCkge1xuXHRcdHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAodGhpcy53aWR0aCAvIHRoaXMuZ3JpZE9wdGlvbnMuZ3JpZFNpemUpKVxuXHR9XG5cblx0Z2V0Q29sRnJvbVgoeCkge1xuXHRcdHJldHVybiBNYXRoLmZsb29yKHggLyB0aGlzLmdyaWRPcHRpb25zLmdyaWRTaXplKTtcblx0fVxuXG5cdGdldFJvd0Zyb21ZKHkpIHtcblx0XHRyZXR1cm4gTWF0aC5mbG9vcih5IC8gdGhpcy5ncmlkT3B0aW9ucy5ncmlkU2l6ZSk7XG5cdH1cblxuXHRnZXRSYW5kb21Sb3coKSB7XG5cdFx0cmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICh0aGlzLmhlaWdodCAvIHRoaXMuZ3JpZE9wdGlvbnMuZ3JpZFNpemUpKVxuXHR9XG5cblx0Z2V0WEZyb21Db2woYykge1xuXHRcdHJldHVybiBjICUgTWF0aC5mbG9vcigodGhpcy53aWR0aCAvIHRoaXMuZ3JpZE9wdGlvbnMuZ3JpZFNpemUpKSAqIHRoaXMuZ3JpZE9wdGlvbnMuZ3JpZFNpemVcblx0fVxuXG5cdGdldFlGcm9tUm93KHIpIHtcblx0XHRyZXR1cm4gciAlIE1hdGguZmxvb3IoKHRoaXMud2lkdGggLyB0aGlzLmdyaWRPcHRpb25zLmdyaWRTaXplKSkgKiB0aGlzLmdyaWRPcHRpb25zLmdyaWRTaXplXG5cdH1cblxuXHRkcmF3R3JpZCgpIHtcblx0XHR0aGlzLmNvbnRleHQuc3Ryb2tlU3R5bGUgPSB0aGlzLmdyaWRPcHRpb25zLmNvbG9yO1xuXHRcdHRoaXMuY29udGV4dC5saW5lV2lkdGggPSBwYXJzZUludCh0aGlzLmdyaWRPcHRpb25zLmxpbmVzU2l6ZSk7XG5cdFx0bGV0IGdyaWRTaXplID0gcGFyc2VJbnQodGhpcy5ncmlkT3B0aW9ucy5ncmlkU2l6ZSk7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmhlaWdodDsgaSArPSBncmlkU2l6ZSkge1xuXHRcdFx0dGhpcy5jb250ZXh0Lm1vdmVUbygwLCBpKTtcblx0XHRcdHRoaXMuY29udGV4dC5saW5lVG8odGhpcy53aWR0aCwgaSk7XG5cdFx0XHR0aGlzLmNvbnRleHQuc3Ryb2tlKCk7XG5cdFx0fVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy53aWR0aDsgaSArPSBncmlkU2l6ZSkge1xuXHRcdFx0dGhpcy5jb250ZXh0Lm1vdmVUbyhpLCAwKTtcblx0XHRcdHRoaXMuY29udGV4dC5saW5lVG8oaSwgdGhpcy5oZWlnaHQpO1xuXHRcdFx0dGhpcy5jb250ZXh0LnN0cm9rZSgpO1xuXHRcdH1cblx0fVxuXG5cdGRyYXdQbGF5ZXIoYywgcikge1xuXHRcdGxldCBpbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXHRcdGltYWdlLnNldEF0dHJpYnV0ZSgnc3JjJywgJ2ltZy9wZXJzb24ucG5nJyk7XG5cdFx0aW1hZ2Uuc2V0QXR0cmlidXRlKCdpZCcsICdwZXJzb24nKTtcblxuXHRcdGltYWdlLm9ubG9hZCA9ICgpID0+IHtcblx0XHRcdHRoaXMuY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIHRoaXMuZ2V0WEZyb21Db2woYyksIHRoaXMuZ2V0WUZyb21Sb3cociksIHRoaXMuZ3JpZE9wdGlvbnMuZ3JpZFNpemUsIHRoaXMuZ3JpZE9wdGlvbnMuZ3JpZFNpemUpO1xuXHRcdH07XG5cblx0XHR0aGlzLm9jY3VwaWVkW3RoaXMuZ2V0S2V5KGMsIHIpXSA9ICdwbGF5ZXInO1xuXHR9XG5cblx0ZHJhd1BhdGgocGF0aCkge1xuXHRcdGZvcihsZXQgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSArKykge1xuXHRcdFx0bGV0IGMsIHI7XG5cblx0XHRcdFtjLCByXSA9IHBhdGhbaV0uc3BsaXQoJywnKTtcblx0XHRcdHRoaXMuY29udGV4dC5iZWdpblBhdGgoKTtcblx0XHRcdHRoaXMuY29udGV4dC5hcmModGhpcy5nZXRYRnJvbUNvbChjKSsyMCwgdGhpcy5nZXRZRnJvbVJvdyhyKSsyMCwgNSwgMCwgMiAqIE1hdGguUEkpO1xuXHRcdFx0dGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9ICdyZWQnO1xuXHRcdFx0dGhpcy5jb250ZXh0LmZpbGwoKTtcblx0XHRcdHRoaXMuY29udGV4dC5saW5lV2lkdGggPSAwO1xuXHRcdFx0dGhpcy5jb250ZXh0LnN0cm9rZSgpO1xuXHRcdH1cblx0fVxuXG5cdGdldEtleShjLCByKSB7XG5cdFx0cmV0dXJuIGAke2N9LCR7cn1gO1xuXHR9XG5cblx0aXNPY2N1cGllZEJ5VHJlZShjLCByKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZCAhPT0gdGhpcy5vY2N1cGllZFt0aGlzLmdldEtleShjLCByKV0gJiYgdGhpcy5vY2N1cGllZFt0aGlzLmdldEtleShjLCByKV0gPT09ICd0cmVlJztcblx0fVxuXG5cdGRyYXdUcmVlcygpIHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IDE1MDsgaSsrKSB7XG5cdFx0XHRsZXQgYyA9IHRoaXMuZ2V0UmFuZG9tQ29sKCk7XG5cdFx0XHRsZXQgciA9IHRoaXMuZ2V0UmFuZG9tUm93KCk7XG5cblx0XHRcdGlmICh1bmRlZmluZWQgIT09IHRoaXMub2NjdXBpZWRbdGhpcy5nZXRLZXkoYywgcildKSB7XG5cdFx0XHRcdGkgLT0gMTtcblx0XHRcdFx0Y29udGludWVcblx0XHRcdH1cblxuXHRcdFx0bGV0IGltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG5cdFx0XHRpbWFnZS5zZXRBdHRyaWJ1dGUoJ3NyYycsICdpbWcvdHJlZS5qcGVnJyk7XG5cdFx0XHRpbWFnZS5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3RyZWUnKTtcblxuXHRcdFx0aW1hZ2Uub25sb2FkID0gKCkgPT4ge1xuXHRcdFx0XHR0aGlzLmNvbnRleHQuZHJhd0ltYWdlKGltYWdlLCB0aGlzLmdldFhGcm9tQ29sKGMpICsgMSwgdGhpcy5nZXRZRnJvbVJvdyhyKSArIDEsIHRoaXMuZ3JpZE9wdGlvbnMuZ3JpZFNpemUgLSAxLCB0aGlzLmdyaWRPcHRpb25zLmdyaWRTaXplIC0gMSk7XG5cdFx0XHR9O1xuXG5cdFx0XHR0aGlzLm9jY3VwaWVkW3RoaXMuZ2V0S2V5KGMsIHIpXSA9ICd0cmVlJztcblx0XHR9XG5cdH1cblxuXHRjbGVhckJsb2NrKGMsIHIpIHtcblx0XHR0aGlzLmNvbnRleHQuY2xlYXJSZWN0KHRoaXMuZ2V0WEZyb21Db2woYykgKyAxLCB0aGlzLmdldFlGcm9tUm93KHIpICsgMSwgdGhpcy5ncmlkT3B0aW9ucy5ncmlkU2l6ZSAtIDIsIHRoaXMuZ3JpZE9wdGlvbnMuZ3JpZFNpemUgLSAyKTtcblx0fVxuXG5cdGNsZWFyQmxvY2tzKHBhdGgpIHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcblx0XHRcdGxldCByZXMgPSBwYXRoW2ldLnNwbGl0KCcsJyk7XG5cdFx0XHR0aGlzLmNsZWFyQmxvY2socmVzWzBdLCByZXNbMV0pO1xuXHRcdH1cblx0fVxufVxuXG5leHBvcnQge1JlbmRlcmVyfSIsImNsYXNzIFBhdGhGaW5kZXIge1xuXG5cdGNvbnN0cnVjdG9yKCByZW5kZXJlciApIHtcblx0XHR0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXJcblx0fVxuXG5cdGdlbmVyYXRlUGF0aChzb3VyY2UsIHRhcmdldCkge1xuXHRcdGxldCBjID0ge1xuXHRcdFx0Yzogc291cmNlLmMsXG5cdFx0XHRyOiBzb3VyY2UuclxuXHRcdH07XG5cblx0XHRsZXQgcSA9IFtjXTtcblx0XHRsZXQgZm91bmQgPSBmYWxzZTtcblx0XHRsZXQgdmlzaXRlZCA9IFtdO1xuXHRcdGxldCBwYXRocyA9IHt9O1xuXHRcdHBhdGhzW2Ake2MuY30sJHtjLnJ9YF0gPSBmYWxzZTtcblxuXHRcdHdoaWxlIChxLmxlbmd0aCA+IDApIHtcblxuXHRcdFx0YyA9IHEuc2hpZnQoKTtcblx0XHRcdGxldCBkciA9IFstMSwgMSwgMCwgMF07XG5cdFx0XHRsZXQgZGMgPSBbMCwgMCwgLTEsIDFdO1xuXG5cdFx0XHRpZiAodGFyZ2V0LmMgPT0gYy5jICYmIHRhcmdldC5yID09IGMucikge1xuXHRcdFx0XHRmb3VuZCA9IHRydWU7XG5cdFx0XHRcdGJyZWFrXG5cdFx0XHR9XG5cblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgZHIubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0bGV0IGNyID0gcGFyc2VJbnQoYy5yKSArIGRyW2ldO1xuXHRcdFx0XHRsZXQgY2MgPSBwYXJzZUludChjLmMpICsgZGNbaV07XG5cblx0XHRcdFx0aWYgKGNyIDwgMCB8fCBjYyA8IDAgfHwgY3IgPiBNYXRoLmZsb29yKHRoaXMucmVuZGVyZXIuaGVpZ2h0IC8gdGhpcy5yZW5kZXJlci5ncmlkT3B0aW9ucy5ncmlkU2l6ZSkgLSAxIHx8IGNjID4gTWF0aC5mbG9vcih0aGlzLnJlbmRlcmVyLndpZHRoIC8gdGhpcy5yZW5kZXJlci5ncmlkT3B0aW9ucy5ncmlkU2l6ZSkgLSAxKSB7XG5cdFx0XHRcdFx0Y29udGludWVcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh2aXNpdGVkLmluZGV4T2YoYCR7Y2N9LCR7Y3J9YCkgIT09IC0xKSB7XG5cdFx0XHRcdFx0Y29udGludWVcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh0aGlzLnJlbmRlcmVyLmlzT2NjdXBpZWRCeVRyZWUoY2MsIGNyKSkge1xuXHRcdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2aXNpdGVkLnB1c2goYCR7Y2N9LCR7Y3J9YCk7XG5cdFx0XHRcdHEucHVzaCh7YzogY2MsIHI6IGNyfSk7XG5cdFx0XHRcdHBhdGhzW2Ake2NjfSwke2NyfWBdID0gYCR7Yy5jfSwke2Mucn1gXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGZvdW5kKSB7XG5cdFx0XHRsZXQgcmlnaHRQYXRoID0gW2Ake3RhcmdldC5jfSwke3RhcmdldC5yfWBdO1xuXG5cdFx0XHRjID0gcGF0aHNbYCR7dGFyZ2V0LmN9LCR7dGFyZ2V0LnJ9YF07XG5cblx0XHRcdGlmKCFjKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZVxuXHRcdFx0fVxuXG5cdFx0XHR3aGlsZSAoYyAhPT0gYCR7c291cmNlLmN9LCR7c291cmNlLnJ9YCkge1xuXHRcdFx0XHRyaWdodFBhdGgucHVzaChjKTtcblx0XHRcdFx0YyA9IHBhdGhzW2NdXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByaWdodFBhdGgucmV2ZXJzZSgpXG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBmYWxzZVxuXHRcdH1cblx0fVxufVxuXG5leHBvcnQge1BhdGhGaW5kZXJ9IiwiY2xhc3MgQW5pbWF0aW9uIHtcblxuXHRjb25zdHJ1Y3RvcihyZW5kZXJlciwgcGF0aEZpbmRlcikge1xuXHRcdHRoaXMucGF0aCA9IFtdO1xuXHRcdHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcblx0XHR0aGlzLmFuaW1hdGlvbkZyYW1lID0gbnVsbDtcblx0XHR0aGlzLnRpbWVySWQgPSBudWxsO1xuXHRcdHRoaXMucHJldmlvdXMgPSB7fTtcblx0XHR0aGlzLnBhdGhGaW5kZXIgPSBwYXRoRmluZGVyO1xuXHRcdHRoaXMuc3RhcnQgPSB7XG5cdFx0XHQnYyc6IDAsXG5cdFx0XHQncic6IDBcblx0XHR9O1xuXHR9XG5cblx0YWRkRXZlbnQoKSB7XG5cdFx0dGhpcy5yZW5kZXJlci5nZXQoKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG5cdFx0XHR0aGlzLmFuaW1hdGlvbkZyYW1lID0gbnVsbDtcblx0XHRcdGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcklkKTtcblxuXHRcdFx0bGV0IHRhcmdldCA9IHtcblx0XHRcdFx0YzogdGhpcy5yZW5kZXJlci5nZXRDb2xGcm9tWChlLmNsaWVudFgpLFxuXHRcdFx0XHRyOiB0aGlzLnJlbmRlcmVyLmdldFJvd0Zyb21ZKGUuY2xpZW50WSlcblx0XHRcdH07XG5cblx0XHRcdHRoaXMucmVuZGVyZXIuY2xlYXJCbG9ja3ModGhpcy5wYXRoKTtcblx0XHRcdHRoaXMucGF0aCA9IHRoaXMucGF0aEZpbmRlci5nZW5lcmF0ZVBhdGgodGhpcy5zdGFydCwgdGFyZ2V0KTtcblxuXHRcdFx0aWYgKCF0aGlzLnBhdGgpIHtcblx0XHRcdFx0cmV0dXJuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMucmVuZGVyZXIuZHJhd1BhdGgodGhpcy5wYXRoKTtcblxuXHRcdFx0dGhpcy5wcmV2aW91cyA9IHtcblx0XHRcdFx0YzogdGhpcy5zdGFydC5jLFxuXHRcdFx0XHRyOiB0aGlzLnN0YXJ0LnJcblx0XHRcdH07XG5cblx0XHRcdGxldCBhbmltYXRpb25DYWxsYmFjayA9ICgpID0+IHtcblx0XHRcdFx0bGV0IGN1cnIgPSB0aGlzLnBhdGguc2hpZnQoKTtcblxuXHRcdFx0XHRpZiAoIWN1cnIpIHtcblx0XHRcdFx0XHR3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRpb25GcmFtZSk7XG5cdFx0XHRcdFx0cmV0dXJuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLnJlbmRlcmVyLmNvbnRleHQuY2xlYXJSZWN0KHRoaXMucmVuZGVyZXIuZ2V0WEZyb21Db2wodGhpcy5wcmV2aW91cy5jKSArIDEsIHRoaXMucmVuZGVyZXIuZ2V0WUZyb21Sb3codGhpcy5wcmV2aW91cy5yKSArIDEsIDM4LCAzOCk7XG5cdFx0XHRcdGxldCByZXMgPSBjdXJyLnNwbGl0KCcsJyk7XG5cdFx0XHRcdHRoaXMuc3RhcnQgPSB0aGlzLnByZXZpb3VzID0ge1xuXHRcdFx0XHRcdGM6IHJlc1swXSxcblx0XHRcdFx0XHRyOiByZXNbMV1cblx0XHRcdFx0fTtcblx0XHRcdFx0dGhpcy5yZW5kZXJlci5jbGVhckJsb2NrKHRoaXMucHJldmlvdXMuYywgdGhpcy5wcmV2aW91cy5yKTtcblx0XHRcdFx0dGhpcy5yZW5kZXJlci5kcmF3UGxheWVyKHJlc1swXSwgcmVzWzFdKTtcblxuXHRcdFx0XHRpZiAodGhpcy5wYXRoLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHR0aGlzLnRpbWVySWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uQ2FsbGJhY2spO1xuXHRcdFx0XHRcdH0sIDIwMClcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0dGhpcy5hbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uQ2FsbGJhY2spO1xuXHRcdH0pO1xuXHR9XG59XG5cbmV4cG9ydCB7QW5pbWF0aW9ufSIsImltcG9ydCB7UmVuZGVyZXJ9IGZyb20gXCIuL3JlbmRlcmVyXCI7XG5pbXBvcnQge1BhdGhGaW5kZXJ9IGZyb20gXCIuL3BhdGhmaW5kZXJcIjtcbmltcG9ydCB7QW5pbWF0aW9ufSBmcm9tIFwiLi9hbmltYXRpb25cIjtcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcblx0bGV0IHJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKDE0MDEsIDY0MSk7XG5cblx0cmVuZGVyZXIuZHJhd0dyaWQoKTtcblx0cmVuZGVyZXIuZHJhd1BsYXllcigwLCAwKTtcblx0cmVuZGVyZXIuZHJhd1RyZWVzKCk7XG5cblx0bGV0IGFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb24ocmVuZGVyZXIsIG5ldyBQYXRoRmluZGVyKHJlbmRlcmVyKSk7XG5cdGFuaW1hdGlvbi5hZGRFdmVudCgpO1xufSk7Il0sInNvdXJjZVJvb3QiOiIifQ==