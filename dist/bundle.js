!function(t){var e={};function i(r){if(e[r])return e[r].exports;var s=e[r]={i:r,l:!1,exports:{}};return t[r].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(r,s,function(e){return t[e]}.bind(null,s));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);class r{constructor(t,e){this.width=t,this.height=e,this.canvas=document.createElement("canvas"),this.canvas.setAttribute("width",t),this.canvas.setAttribute("height",e),this.context=this.canvas.getContext("2d"),this.gridOptions={color:"grey",gridSize:40,linesSize:0},this.occupied={},this.start={c:this.getRandomCol(),r:this.getRandomRow()},document.getElementsByTagName("body")[0].appendChild(this.canvas)}get(){return this.canvas}getRandomCol(){return Math.floor(Math.random()*(this.width/this.gridOptions.gridSize))}getColFromX(t){return Math.floor(t/this.gridOptions.gridSize)}getRowFromY(t){return Math.floor(t/this.gridOptions.gridSize)}getRandomRow(){return Math.floor(Math.random()*(this.height/this.gridOptions.gridSize))}getXFromCol(t){return t%Math.floor(this.width/this.gridOptions.gridSize)*this.gridOptions.gridSize}getYFromRow(t){return t%Math.floor(this.width/this.gridOptions.gridSize)*this.gridOptions.gridSize}drawGrid(){this.context.strokeStyle=this.gridOptions.color,this.context.lineWidth=parseInt(this.gridOptions.linesSize);let t=parseInt(this.gridOptions.gridSize);for(let e=0;e<this.height;e+=t)this.context.moveTo(0,e),this.context.lineTo(this.width,e),this.context.stroke();for(let e=0;e<this.width;e+=t)this.context.moveTo(e,0),this.context.lineTo(e,this.height),this.context.stroke()}drawPlayer(t,e){let i=document.createElement("img");i.setAttribute("src","img/person.png"),i.setAttribute("id","person"),i.onload=()=>{this.context.drawImage(i,this.getXFromCol(t),this.getYFromRow(e),this.gridOptions.gridSize,this.gridOptions.gridSize)},this.occupied[this.getKey(t,e)]="player"}drawPath(t){for(let e=0;e<t.length;e++){let i,r;[i,r]=t[e].split(","),this.context.beginPath(),this.context.arc(this.getXFromCol(i)+20,this.getYFromRow(r)+20,5,0,2*Math.PI),this.context.fillStyle="red",this.context.fill(),this.context.lineWidth=0}}getKey(t,e){return`${t},${e}`}isOccupiedByTree(t,e){return void 0!==this.occupied[this.getKey(t,e)]&&"tree"===this.occupied[this.getKey(t,e)]}drawTrees(t){for(let e=0;e<t;e++){let t=this.getRandomCol(),i=this.getRandomRow();if(void 0!==this.occupied[this.getKey(t,i)]){e-=1;continue}let r=document.createElement("img");r.setAttribute("src","img/tree.jpeg"),r.setAttribute("id","tree"),r.onload=()=>{this.context.drawImage(r,this.getXFromCol(t)+1,this.getYFromRow(i)+1,this.gridOptions.gridSize-1,this.gridOptions.gridSize-1)},this.occupied[this.getKey(t,i)]="tree"}}clearBlock(t,e){this.context.clearRect(this.getXFromCol(t)+1,this.getYFromRow(e)+1,this.gridOptions.gridSize-2,this.gridOptions.gridSize-2)}clearBlocks(t){for(let e=0;e<t.length;e++){let i=t[e].split(",");this.clearBlock(i[0],i[1])}}}class s{constructor(t){this.renderer=t}generatePath(t,e){let i={c:t.c,r:t.r},r=[i],s=!1,o=[],n={};for(n[`${i.c},${i.r}`]=!1;r.length>0;){i=r.shift();let t=[-1,1,0,0],h=[0,0,-1,1];if(e.c==i.c&&e.r==i.r){s=!0;break}for(let e=0;e<t.length;e++){let s=parseInt(i.r)+t[e],a=parseInt(i.c)+h[e];s<0||a<0||s>Math.floor(this.renderer.height/this.renderer.gridOptions.gridSize)-1||a>Math.floor(this.renderer.width/this.renderer.gridOptions.gridSize)-1||-1===o.indexOf(`${a},${s}`)&&(this.renderer.isOccupiedByTree(a,s)||(o.push(`${a},${s}`),r.push({c:a,r:s}),n[`${a},${s}`]=`${i.c},${i.r}`))}}if(s){let r=[`${e.c},${e.r}`];if(i=n[`${e.c},${e.r}`],!i)return!1;for(;i!==`${t.c},${t.r}`;)r.push(i),i=n[i];return r.reverse()}return!1}}class o{constructor(t,e){this.path=[],this.renderer=t,this.animationFrame=null,this.timerId=null,this.previous={},this.pathFinder=e,this.start={c:t.start.c,r:t.start.r}}addEvent(){this.renderer.get().addEventListener("click",t=>{window.cancelAnimationFrame(this.animationFrame),this.animationFrame=null,clearInterval(this.timerId);let e={c:this.renderer.getColFromX(t.clientX),r:this.renderer.getRowFromY(t.clientY)};if(this.renderer.clearBlocks(this.path),this.path=this.pathFinder.generatePath(this.start,e),!this.path)return;this.renderer.drawPath(this.path),this.previous={c:this.start.c,r:this.start.r};let i=()=>{let t=this.path.shift();if(!t)return void window.cancelAnimationFrame(this.animationFrame);this.renderer.context.clearRect(this.renderer.getXFromCol(this.previous.c)+1,this.renderer.getYFromRow(this.previous.r)+1,38,38);let e=t.split(",");this.start=this.previous={c:e[0],r:e[1]},this.renderer.clearBlock(this.previous.c,this.previous.r),this.renderer.drawPlayer(e[0],e[1]),this.path.length>0&&(this.timerId=setTimeout(()=>{window.requestAnimationFrame(i)},200))};this.animationFrame=window.requestAnimationFrame(i)})}}document.addEventListener("DOMContentLoaded",()=>{let t=new r(1401,641);t.drawGrid(),t.drawPlayer(t.start.c,t.start.r),t.drawTrees(100),new o(t,new s(t)).addEvent()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,